package com.neo2.telebang.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBWISH_LIST_VIDEO".
*/
public class DBWishListVideoDao extends AbstractDao<DBWishListVideo, Long> {

    public static final String TABLENAME = "DBWISH_LIST_VIDEO";

    /**
     * Properties of entity DBWishListVideo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VideoID = new Property(1, int.class, "VideoID", false, "VIDEO_ID");
        public final static Property VideoCategory = new Property(2, String.class, "VideoCategory", false, "VIDEO_CATEGORY");
        public final static Property VideoThumbnail = new Property(3, String.class, "VideoThumbnail", false, "VIDEO_THUMBNAIL");
        public final static Property VideoName = new Property(4, String.class, "VideoName", false, "VIDEO_NAME");
        public final static Property VideoCreateAt = new Property(5, String.class, "VideoCreateAt", false, "VIDEO_CREATE_AT");
        public final static Property UserID = new Property(6, int.class, "UserID", false, "USER_ID");
    }


    public DBWishListVideoDao(DaoConfig config) {
        super(config);
    }
    
    public DBWishListVideoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBWISH_LIST_VIDEO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"VIDEO_ID\" INTEGER NOT NULL ," + // 1: VideoID
                "\"VIDEO_CATEGORY\" TEXT NOT NULL ," + // 2: VideoCategory
                "\"VIDEO_THUMBNAIL\" TEXT NOT NULL ," + // 3: VideoThumbnail
                "\"VIDEO_NAME\" TEXT NOT NULL ," + // 4: VideoName
                "\"VIDEO_CREATE_AT\" TEXT NOT NULL ," + // 5: VideoCreateAt
                "\"USER_ID\" INTEGER NOT NULL );"); // 6: UserID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBWISH_LIST_VIDEO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBWishListVideo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getVideoID());
        stmt.bindString(3, entity.getVideoCategory());
        stmt.bindString(4, entity.getVideoThumbnail());
        stmt.bindString(5, entity.getVideoName());
        stmt.bindString(6, entity.getVideoCreateAt());
        stmt.bindLong(7, entity.getUserID());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBWishListVideo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getVideoID());
        stmt.bindString(3, entity.getVideoCategory());
        stmt.bindString(4, entity.getVideoThumbnail());
        stmt.bindString(5, entity.getVideoName());
        stmt.bindString(6, entity.getVideoCreateAt());
        stmt.bindLong(7, entity.getUserID());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBWishListVideo readEntity(Cursor cursor, int offset) {
        DBWishListVideo entity = new DBWishListVideo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // VideoID
            cursor.getString(offset + 2), // VideoCategory
            cursor.getString(offset + 3), // VideoThumbnail
            cursor.getString(offset + 4), // VideoName
            cursor.getString(offset + 5), // VideoCreateAt
            cursor.getInt(offset + 6) // UserID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBWishListVideo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVideoID(cursor.getInt(offset + 1));
        entity.setVideoCategory(cursor.getString(offset + 2));
        entity.setVideoThumbnail(cursor.getString(offset + 3));
        entity.setVideoName(cursor.getString(offset + 4));
        entity.setVideoCreateAt(cursor.getString(offset + 5));
        entity.setUserID(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBWishListVideo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBWishListVideo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBWishListVideo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
